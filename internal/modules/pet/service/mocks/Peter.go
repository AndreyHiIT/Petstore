// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"
	service "pet-store/internal/modules/pet/service"
	mock "github.com/stretchr/testify/mock"
)

// Peter is an autogenerated mock type for the Peter type
type Peter struct {
	mock.Mock
}

// AddPet provides a mock function with given fields: ctx, pet
func (_m *Peter) AddPet(ctx context.Context, pet service.PetAddRequest) service.RequestOut {
	ret := _m.Called(ctx, pet)

	if len(ret) == 0 {
		panic("no return value specified for AddPet")
	}

	var r0 service.RequestOut
	if rf, ok := ret.Get(0).(func(context.Context, service.PetAddRequest) service.RequestOut); ok {
		r0 = rf(ctx, pet)
	} else {
		r0 = ret.Get(0).(service.RequestOut)
	}

	return r0
}

// FindPetbyID provides a mock function with given fields: ctx, strID
func (_m *Peter) FindPetbyID(ctx context.Context, strID string) service.RequestOutWithPet {
	ret := _m.Called(ctx, strID)

	if len(ret) == 0 {
		panic("no return value specified for FindPetbyID")
	}

	var r0 service.RequestOutWithPet
	if rf, ok := ret.Get(0).(func(context.Context, string) service.RequestOutWithPet); ok {
		r0 = rf(ctx, strID)
	} else {
		r0 = ret.Get(0).(service.RequestOutWithPet)
	}

	return r0
}

// FindPetbyStatus provides a mock function with given fields: ctx, statuses
func (_m *Peter) FindPetbyStatus(ctx context.Context, statuses []string) service.RequestOutWithPets {
	ret := _m.Called(ctx, statuses)

	if len(ret) == 0 {
		panic("no return value specified for FindPetbyStatus")
	}

	var r0 service.RequestOutWithPets
	if rf, ok := ret.Get(0).(func(context.Context, []string) service.RequestOutWithPets); ok {
		r0 = rf(ctx, statuses)
	} else {
		r0 = ret.Get(0).(service.RequestOutWithPets)
	}

	return r0
}

// UpdatePet provides a mock function with given fields: ctx, pet
func (_m *Peter) UpdatePet(ctx context.Context, pet service.PetUpdateRequest) service.RequestOut {
	ret := _m.Called(ctx, pet)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePet")
	}

	var r0 service.RequestOut
	if rf, ok := ret.Get(0).(func(context.Context, service.PetUpdateRequest) service.RequestOut); ok {
		r0 = rf(ctx, pet)
	} else {
		r0 = ret.Get(0).(service.RequestOut)
	}

	return r0
}

// UpdatePetForm provides a mock function with given fields: ctx, name, status, reqID
func (_m *Peter) UpdatePetForm(ctx context.Context, name string, status string, reqID string) service.RequestOut {
	ret := _m.Called(ctx, name, status, reqID)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePetForm")
	}

	var r0 service.RequestOut
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) service.RequestOut); ok {
		r0 = rf(ctx, name, status, reqID)
	} else {
		r0 = ret.Get(0).(service.RequestOut)
	}

	return r0
}

// NewPeter creates a new instance of Peter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Peter {
	mock := &Peter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
